<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>

</body>
</html>

<script>
// nums 배열로부터 짝수만 골라내기
let nums = [20,3,14,2,15,16];

//기존 방식
for(i=0; i<nums.length; i++)
	{
	if(nums[i] % 2 ==0)
		console.log(nums[i]);
	}

// 새로운 배열을 만들려면
let evens=[];
for(i=0; i<nums.length; i++)
{
if(nums[i] % 2 == 0)
	evens.push(nums[i]);
}
console.log(evens);

// filter함수는 데이터를 걸러내는 함수
function isEven(nums)
{
	return nums%2==0;	
}
// 배열의 요소마다 isEven함수 호출하고, true인 집합만 반환
/*
evens = nums.filter(isEven);
console.log(evens);

// 화살표 함수 
	// isEven함수를 두줄로 줄일 수 있음 
evens = nums.filter(x=>x%2==0);
console.log(evens);

// 홀수
console.log(nums.filter(x=>x%2==1));

// forEach 출력용 
	// 반환값을 가질 수 없음 
	// 매개변수 하나
num.forEach(x=>{
	console.log(x);
	});
*/


// filter가 반환하는 항목이 배열이라서 다시 배열의 멤버 함수를 호출 할 수 있음
nums.filter(x=>x%2==0).forEach(x=>console.log(x));

let words = ["array", "assembly", "java", "programming", "C", "language", "library", "tutor", "cloud"];
//글자수가 5글자 이상인 문자열만 추출
w = words.filter(w=>w.length>=5);
console.log(w);

//map함수 : 데이터 전체에 특정 연산을 수행하고자 할때
twonums = nums.map(x=>x*2);
console.log(twonums);

// words => 대문자로 toUpper() 
up = words.filter(up=>up.toUpper(words));
console.log(up);
</script>